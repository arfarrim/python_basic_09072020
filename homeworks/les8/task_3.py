"""
3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел. Проверить
 работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
 Класс-исключение должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу
скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список выводится на экран.
Подсказка: для данного задания примем, что пользователь может вводить только числа и строки. При вводе пользователем
очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число.
Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение. При
этом работа скрипта не должна завершаться.
"""

class NotANumError(Exception):

    def __init__(self, text):
        self.text = text

mark = 1
user_list = []
while mark:
    user_input = input("Введите новый элемент списка или stop для завершения")
    if user_input.lower() == "stop":
        mark = 0
        print(user_list)
        continue
    try:
        if not user_input.isdigit():
            raise NotANumError("")
        else:
            user_list.append(user_input)
    except NotANumError:
        print("Программа принимает только числа")


